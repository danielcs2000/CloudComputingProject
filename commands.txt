# Build image
docker build -t cactus-net

# Run container 
docker run --name test_cactusnet -p 3000:3000 test-next-image

docker rm test_cactusnet

docker image inspect -f '{{.Config.WorkingDir}}' test-next-image




version: '3.7'
services:
  mongo1:
    container_name: mongo1
    image: mongo:4.4
    command: mongod --replSet dbrs
    environment:
      MONGO_INITDB_DATABASE: cactus_db
    volumes:
      - ~/mongors/data1:/data/db
      #- ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - 30001:27017
    networks:
      - mongo-cluster
    restart: always
    
  mongo2:
    container_name: mongo2
    image: mongo:4.4
    command: mongod --replSet dbrs
    volumes:
      - ~/mongors/data2:/data/db
    ports:
      - 30002:27017
    restart: always
    networks:
      - mongo-cluster
    
  mongo3:
    container_name: mongo3
    image: mongo:4.4
    command: mongod --replSet dbrs
    volumes:
      - ~/mongors/data3:/data/db
    ports:
      - 30003:27017
    restart: always
    networks:
      - mongo-cluster
  
networks:
  mongo-cluster:
    



  config = {
    _id: "dbrs",
    members: [
        {
            "_id": 0,
            "host": "mongo1:27017",
        },
        {
            "_id": 1,
            "host": "mongo2:27017",
        },
        {
            "_id": 2,
            "host": "mongo3:27017",
        }
    ]
  }


  config={_id:"dbrs",members:[{_id:0,host:"mongo1:27017"},{_id:1,host:"mongo2:27017"},{_id:2,host:"mongo3:27017"}]};
  rs.inititate(config);